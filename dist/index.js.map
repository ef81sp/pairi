{"version":3,"sources":["../src/副露.mts","../src/手牌utils/countRequiredブロックnum.mts","../src/牌.mts","../src/手牌utils/seek有効牌.mts","../src/手牌utils/count牌.mts","../src/手牌utils/calcシャンテン数.mts","../src/手牌utils/countRemaining牌.mts","../src/手牌utils/extractSingleブロック.mts","../src/手牌utils/extractブロックTree.mts","../src/手牌utils/extractPriority雀頭.mts","../src/手牌utils/extractPriority面子.mts","../src/手牌utils/extract特殊役.mts","../src/手牌utils/format牌List.mts","../src/手牌utils/analyze手牌.mts","../src/手牌.mts"],"sourcesContent":["import { 牌 } from \"./牌.mjs\"\n\ntype T宣言 = \"ポン\" | \"チー\" | \"大明槓\" | \"加槓\" | \"暗槓\"\ntype T誰から = \"上家\" | \"対面\" | \"下家\"\ntype 副露InputDataポンチー = {\n  call: \"ポン\" | \"チー\"\n  called牌: 牌\n  other牌: [牌, 牌]\n  from: T誰から\n}\ntype 副露InputDataカン = {\n  call: \"大明槓\" | \"加槓\" | \"暗槓\"\n  called牌: 牌\n  other牌: [牌, 牌, 牌]\n  from: T誰から\n}\n\n/**\n * Represents a 副露 (Furo) in a Japanese Mahjong game.\n */\nexport class 副露 {\n  /** The declaration type of the 副露. */\n  readonly call: T宣言\n  /** The tile that was melded. */\n  readonly called牌: 牌\n  /** The other tiles involved in the meld. */\n  readonly other牌: [牌, 牌, 牌?]\n  /** The player from whom the meld was declared. */\n  readonly from: T誰から\n\n  /**\n   * Creates a new instance of the 副露 class.\n   * @param 宣言 The declaration type of the 副露.\n   * @param 鳴いた牌 The tile that was melded.\n   * @param ほかの牌 The other tiles involved in the meld.\n   * @param 誰から The player from whom the meld was declared.\n   */\n  constructor({ call, called牌, other牌, from }: 副露InputDataポンチー | 副露InputDataカン) {\n    this.call = call\n    this.called牌 = called牌\n    this.other牌 = other牌\n    this.from = from\n  }\n\n  /**\n   * Converts the 副露 to a list of tiles.\n   * @returns An array of tiles involved in the meld.\n   */\n  to牌List() {\n    if (this.other牌[2]) {\n      return [this.called牌, this.other牌[0], this.other牌[1], this.other牌[2]]\n    }\n    return [this.called牌, this.other牌[0], this.other牌[1]]\n  }\n}\n","export const countRequiredブロックnum = (count牌: number): number => {\n  switch (count牌) {\n    case 1:\n      return 1\n    case 4:\n      return 2\n    case 7:\n      return 3\n    case 10:\n      return 4\n    case 13:\n      return 5\n    default:\n      throw new Error(`invalid count牌: ${count牌}`)\n  }\n}\n","import { Number字牌, Number数牌, Str牌, Suit, Suit字牌, Suit数牌 } from \"./utils/types.mjs\"\n\n/**\n * Represents a 牌 (Mahjong tile).\n */\nexport class 牌 {\n  readonly suit: Suit\n  readonly number: typeof this.suit extends Suit字牌 ? Number字牌 : Number数牌\n  readonly is赤牌: boolean\n  private readonly str牌: Str牌\n\n  /**\n   * Constructs a new 牌 instance.\n   * @param pai - The string representation of the 牌.\n   * @param isRed - Indicates whether the 牌 is a red tile.\n   */\n  constructor(pai: Str牌, isRed = false) {\n    const { suit, number } = parsePaiString(pai)\n    this.suit = suit\n    this.number = number\n    this.is赤牌 = (() => {\n      if (suit === \"z\") return false\n      return number === 5 && isRed\n    })()\n    this.str牌 = pai\n  }\n\n  /**\n   * Returns the string representation of the 牌.\n   * @returns The string representation of the 牌.\n   */\n  toString() {\n    return this.str牌\n  }\n\n  /**\n   * Checks if the 牌 is equal to another 牌.\n   * @param pai - The 牌 to compare.\n   * @returns `true` if the 牌 is equal to the specified 牌, `false` otherwise.\n   */\n  toEqual(pai: 牌) {\n    return this.str牌 === pai.str牌\n  }\n\n  /**\n   * Creates a clone of the 牌.\n   * @returns A new 牌 instance that is a clone of the current 牌.\n   */\n  clone() {\n    return new 牌(this.str牌, this.is赤牌)\n  }\n}\n\n/**\n * Parses a string representation of a 牌 and returns the corresponding suit and number.\n * @param pai - The string representation of the 牌.\n * @returns An object containing the suit and number of the 牌.\n * @throws Error if the string representation is invalid.\n */\nconst parsePaiString = (\n  pai: string,\n): { suit: Suit数牌; number: Number数牌 } | { suit: Suit字牌; number: Number字牌 } => {\n  if (pai.length !== 2) throw new Error(`invalid signature ${pai}: length must be 2.`)\n\n  const number = Number(pai[0])\n  const suit = pai[1]\n  const numberErrorMessage = `invalid signature ${pai}: number must be 1, 2, 3, 4, 5, 6, 7, 8 or 9.`\n  const numberErrorMessage数牌 = `invalid signature ${pai}: number must be 1, 2, 3, 4, 5, 6, 7, 8 or 9.`\n  const numberErrorMessage字牌 = `invalid signature ${pai}: number must be 1, 2, 3, 4, 5, 6 or 7.`\n\n  if (!Number.isInteger(number)) throw new Error(numberErrorMessage)\n  if (suit === undefined || ![\"m\", \"p\", \"s\", \"z\"].includes(suit))\n    throw new Error(`invalid signature ${pai}: suit must be \"m\", \"p\", \"s\" or \"z\".`)\n\n  if ([\"m\", \"p\", \"s\"].includes(suit)) {\n    if (!(1 <= number && number <= 9)) throw new Error(numberErrorMessage数牌)\n    return {\n      suit,\n      number,\n    } as { suit: Suit数牌; number: Number数牌 }\n  }\n  if (!(1 <= number && number <= 7)) throw new Error(numberErrorMessage字牌)\n  return {\n    suit,\n    number,\n  } as { suit: Suit字牌; number: Number字牌 }\n}\n\n/**\n * Checks if a string is a valid 牌.\n * @param str - The string to check.\n * @returns `true` if the string is a valid 牌, `false` otherwise.\n */\nexport const isStr牌 = (str: string): str is Str牌 => {\n  if (str.length !== 2) return false\n  const number = Number(str[0])\n  const suit = str[1]\n  if (!Number.isInteger(number)) return false\n  if (suit === undefined) return false\n  if (![\"m\", \"p\", \"s\", \"z\"].includes(suit)) return false\n  if ([\"m\", \"p\", \"s\"].includes(suit)) {\n    if (!(1 <= number && number <= 9)) return false\n  } else {\n    if (!(1 <= number && number <= 7)) return false\n  }\n  return true\n}\n","import { isStr牌, 牌 } from \"../牌.mjs\"\nimport { countRequiredブロックnum } from \"./countRequiredブロックnum.mjs\"\nimport { count牌 } from \"./count牌.mjs\"\nimport {\n  ExtractResult5ブロック,\n  ExtractResult七対子,\n  ExtractResult国士無双,\n  T塔子,\n  T手牌Suit別,\n} from \"./手牌utils.type.mjs\"\n\nexport const seek有効牌5ブロック = (\n  extractResult: ExtractResult5ブロック,\n  シャンテン数: number,\n): 牌[] => {\n  if (シャンテン数 === 0) return seek有効牌5ブロックテンパイ(extractResult)\n  return seek有効牌5ブロックノーテン(extractResult)\n}\n\nexport const seek有効牌七対子 = (extractResult: ExtractResult七対子): 牌[] => {\n  const result: 牌[] = []\n  for (const rest of flattenRest(extractResult.rest)) {\n    // 対子で使われている場合はskip\n    if (extractResult.対子.some((対子) => 対子.component.some((p) => p.toEqual(rest)))) continue\n    result.push(rest.clone())\n  }\n  return result\n}\n\nexport const seek有効牌国士無双 = (extractResult: ExtractResult国士無双): 牌[] => {\n  const target = (\n    [\"1m\", \"9m\", \"1p\", \"9p\", \"1s\", \"9s\", \"1z\", \"2z\", \"3z\", \"4z\", \"5z\", \"6z\", \"7z\"] as const\n  ).map((s) => new 牌(s))\n\n  // 么九牌restが空(=雀頭がない)なら、すべての么九牌\n  if (extractResult.么九牌rest.length === 0) return target\n\n  // そうでない(雀頭がある)なら、么九牌uniqueに存在しないもの\n  return target.filter((p) => !extractResult.么九牌unique.some((p2) => p2.toEqual(p)))\n}\nconst seek有効牌5ブロックテンパイ = (extractResult: ExtractResult5ブロック): 牌[] => {\n  if (extractResult.塔子.length >= 2) {\n    throw new Error(\"塔子が2個以上ある場合は聴牌ではない\")\n  }\n  if (extractResult.雀頭) {\n    // 塔子が面子になる牌を求める\n    if (extractResult.塔子[0] === undefined)\n      throw new Error(\"雀頭があって塔子がない場合はテンパイではない\")\n    return seek塔子To面子(extractResult.塔子[0])\n  }\n  // 単騎待ち\n  // restの中にひとつだけある牌を抽出する\n  const rest = flattenRest(extractResult.rest)[0]\n  if (rest === undefined) throw new Error(`invalid rest: ${extractResult.rest}`)\n  const 牌str = rest.toString()\n  return [new 牌(牌str)]\n}\n\nconst seek有効牌5ブロックノーテン = (extractResult: ExtractResult5ブロック): 牌[] => {\n  const result: 牌[] = []\n\n  const required面子塔子num = countRequiredブロックnum(count牌(extractResult)) - 1 // 雀頭は除く\n  const 面子塔子数 = extractResult.面子.length + extractResult.塔子.length\n\n  for (const 塔子 of extractResult.塔子) {\n    result.push(...seek塔子To面子(塔子))\n  }\n\n  // 雀頭以外のブロックが足りない場合のみ、①restが塔子になる牌 ②雀頭の牌 が有効牌になる\n  if (面子塔子数 < required面子塔子num) {\n    for (const rest of flattenRest(extractResult.rest)) {\n      result.push(...seekRestTo塔子(rest))\n    }\n    if (extractResult.雀頭) {\n      result.push(extractResult.雀頭.component[0].clone())\n    }\n  }\n\n  if (!extractResult.雀頭) {\n    // 雀頭がなく、雀頭以外のブロックが足りている場合、restは雀頭にならないといけない\n    if (面子塔子数 === required面子塔子num) {\n      result.push(...flattenRest(extractResult.rest))\n    } else if (面子塔子数 > required面子塔子num) {\n      // 雀頭がなくブロックオーバーの場合は、塔子が雀頭になる\n      for (const 塔子 of extractResult.塔子) {\n        result.push(...塔子.component.map((p) => p.clone()))\n      }\n    }\n  }\n\n  const uniqueResult = result\n    .filter((p, i) => {\n      return result.findIndex((p2) => p2.toEqual(p)) === i\n    })\n    .sort((a, b) => {\n      if (a.suit === b.suit) return a.number - b.number\n      return a.suit.charCodeAt(0) - b.suit.charCodeAt(0)\n    })\n\n  return uniqueResult\n}\n\nexport const flattenRest = (rest: T手牌Suit別): 牌[] => {\n  return Object.values(rest).flat()\n}\n\nconst seek塔子To面子 = (塔子: T塔子): 牌[] => {\n  const [牌1, 牌2] = 塔子.component\n\n  switch (true) {\n    // シャンポン (字牌はここにしか来ない)\n    case 牌1.number === 牌2.number: {\n      return [牌1.clone()]\n    }\n    // 辺張\n    case 牌1.number === 1 && 牌2.number === 2: {\n      return [new 牌(`3${牌1.suit}`)]\n    }\n    case 牌1.number === 8 && 牌2.number === 9: {\n      return [new 牌(`7${牌1.suit}`)]\n    }\n    // 嵌張\n    case 牌1.number === 牌2.number - 2: {\n      const 牌str = `${牌1.number + 1}${牌1.suit}`\n      if (!isStr牌(牌str)) throw new Error(`invalid 牌str: ${牌str}`)\n      return [new 牌(牌str)]\n    }\n    // 両面 (辺張は先に弾いてるのでこれでよい)\n    case 牌1.number === 牌2.number - 1: {\n      const 牌str1 = `${牌1.number - 1}${牌1.suit}`\n      const 牌str2 = `${牌2.number + 1}${牌2.suit}`\n      if (!isStr牌(牌str1)) throw new Error(`invalid 牌str: ${牌str1}`)\n      if (!isStr牌(牌str2)) throw new Error(`invalid 牌str: ${牌str2}`)\n      return [new 牌(牌str1), new 牌(牌str2)]\n    }\n    default: {\n      throw new Error(\n        `invalid 塔子: ${塔子.component[0].toString()} ${塔子.component[1].toString()}`,\n      )\n    }\n  }\n}\n\nconst seekRestTo塔子 = (浮き牌: 牌): 牌[] => {\n  const n = [1, 2, 3, 4, 5, 6, 7, 8, 9]\n  switch (浮き牌.suit) {\n    // m, p, s なら、2つとなりまでの牌\n    case \"m\":\n    case \"p\":\n    case \"s\": {\n      const index = n.indexOf(浮き牌.number)\n      const min = Math.max(0, index - 2)\n      const max = Math.min(8, index + 2)\n      const targetNum = n.slice(min, max + 1)\n\n      return targetNum.map((n) => {\n        const str = `${n}${浮き牌.suit}`\n        if (!isStr牌(str)) throw new Error(`invalid str: ${str}`)\n        return new 牌(str)\n      })\n    }\n    // z なら、同じ牌\n    case \"z\": {\n      return [浮き牌.clone()]\n    }\n  }\n}\n","import { flattenRest } from \"./seek有効牌.mjs\"\nimport { ExtractResult5ブロック } from \"./手牌utils.type.mjs\"\n\nexport const count牌 = (extractResult5ブロック: ExtractResult5ブロック): number => {\n  let count = 0\n  if (extractResult5ブロック.雀頭) count += 2\n  count += extractResult5ブロック.面子.length * 3\n  count += extractResult5ブロック.塔子.length * 2\n  count += flattenRest(extractResult5ブロック.rest).length\n  return count\n}\n","import { countRequiredブロックnum } from \"./countRequiredブロックnum.mjs\"\nimport { count牌 } from \"./count牌.mjs\"\nimport {\n  ExtractResult5ブロック,\n  ExtractResult七対子,\n  ExtractResult国士無双,\n} from \"./手牌utils.type.mjs\"\n\nexport const calcシャンテン数5ブロック = (\n  extractResult5ブロック: ExtractResult5ブロック,\n): number => {\n  const requiredブロックnum = countRequiredブロックnum(count牌(extractResult5ブロック))\n\n  // いわゆる「8点法」を採用\n  let シャンテン数 = 8\n\n  // 手牌が短い場合、必要面子数が減る\n  シャンテン数 -= (5 - requiredブロックnum) * 2\n\n  // 面子の数 * 2点\n  シャンテン数 -= extractResult5ブロック.面子.length * 2\n  // 塔子の数 * 1点\n  シャンテン数 -= extractResult5ブロック.塔子.length\n  // 雀頭があれば 1点\n  シャンテン数 -= extractResult5ブロック.雀頭 ? 1 : 0\n  // 面子と塔子が5個以上あると +1点 (雀頭は関係ない)\n  if (\n    extractResult5ブロック.面子.length + extractResult5ブロック.塔子.length >=\n    requiredブロックnum\n  ) {\n    シャンテン数 += 1\n  }\n  return シャンテン数\n}\n\nexport const calcシャンテン数七対子 = (extractResult七対子: ExtractResult七対子): number => {\n  return 6 - extractResult七対子.対子.length\n}\n\nexport const calcシャンテン数国士無双 = (extractResult国士無双: ExtractResult国士無双): number => {\n  return extractResult国士無双.么九牌rest.length === 0\n    ? 13 - extractResult国士無双.么九牌unique.length\n    : 12 - extractResult国士無双.么九牌unique.length\n}\n","import { Str牌 } from \"../utils/types.mjs\"\nimport { 牌 } from \"../牌.mjs\"\n\nexport const countRemaining牌num = (\n  target: 牌[],\n  visible牌List: 牌[],\n): Map<Str牌, { 牌: 牌; remains: number }> => {\n  const map = new Map<Str牌, { 牌: 牌; remains: number }>(\n    target.map((p) => [p.toString(), { 牌: p, remains: 4 }]),\n  )\n  for (const visible牌 of visible牌List) {\n    const p = map.get(visible牌.toString())\n    if (p) {\n      p.remains -= 1\n    }\n  }\n  return map\n}\n\nif (import.meta.vitest) {\n  test(\"全枯れ\", () => {\n    const result = countRemaining牌num(\n      [new 牌(\"1m\")],\n      [new 牌(\"1m\"), new 牌(\"1m\"), new 牌(\"1m\"), new 牌(\"1m\")],\n    )\n    expect(result.get(\"1m\")).toEqual({ 牌: new 牌(\"1m\"), remains: 0 })\n  })\n}","import { Suit } from \"../utils/types.mjs\"\nimport { isStr牌, 牌 } from \"../牌.mjs\"\nimport {\n  Result単体抽出,\n  Result単体抽出Success,\n  Tブロック,\n  TブロックType,\n  T塔子,\n  T対子,\n  T手牌Suit別,\n  T雀頭,\n  T面子,\n} from \"./手牌utils.type.mjs\"\n\n// 用語: 順塔子とは、 両面・辺張・嵌張 のこと。一般名称がないので……\n\n// TS、返り値の型の絞り込みは未実装らしい。asで型アサーションするしかない。\n\nexport const extractSingleブロック = <T extends TブロックType>(\n  手牌: T手牌Suit別,\n  type: T,\n  startAt: { suit: Suit; index: number },\n): Result単体抽出<T> => {\n  validate手牌(手牌)\n\n  const { suit, index } = startAt\n  switch (type) {\n    case \"雀頭\": {\n      const 牌1 = 手牌[suit][index]\n      const 牌2 = 手牌[suit][index + 1]\n      if (!(牌1 && 牌2)) return { status: \"failure\" }\n      if (!is対子(牌1, 牌2)) return { status: \"failure\" }\n      const ブロック: T雀頭 = {\n        type: \"雀頭\",\n        component: [牌1, 牌2],\n      }\n      const result: Result単体抽出<\"雀頭\"> = {\n        status: \"success\",\n        ブロック,\n        rest: {\n          ...手牌,\n          [suit]: 手牌[suit].filter((_, i) => i !== index && i !== index + 1),\n        },\n      }\n      return result satisfies Result単体抽出Success<\"雀頭\"> as Result単体抽出<T>\n    }\n    case \"面子\": {\n      // 刻子 → 順子\n      const 牌1 = 手牌[suit][index]\n      const 牌2 = 手牌[suit][index + 1]\n      const 牌3 = 手牌[suit][index + 2]\n      if (!(牌1 && 牌2 && 牌3)) return { status: \"failure\" }\n      if (is刻子(牌1, 牌2, 牌3)) {\n        const ブロック: T面子 = {\n          type: \"面子\",\n          component: [牌1, 牌2, 牌3],\n        }\n        const result: Result単体抽出<\"面子\"> = {\n          status: \"success\",\n          ブロック,\n          rest: {\n            ...手牌,\n            [suit]: 手牌[suit].filter((_, i) => i !== index && i !== index + 1 && i !== index + 2),\n          },\n        }\n        return result satisfies Result単体抽出Success<\"面子\"> as Result単体抽出<T>\n      }\n      return find順子(手牌, startAt) as Result単体抽出<T>\n    }\n    case \"塔子\": {\n      // 対子 → 順塔子\n      const 牌1 = 手牌[suit][index]\n      const 牌2 = 手牌[suit][index + 1]\n      if (!(牌1 && 牌2)) return { status: \"failure\" }\n      if (is対子(牌1, 牌2)) {\n        const ブロック: T塔子 = {\n          type: \"塔子\",\n          component: [牌1, 牌2],\n        }\n        const result: Result単体抽出<\"塔子\"> = {\n          status: \"success\",\n          ブロック,\n          rest: {\n            ...手牌,\n            [suit]: 手牌[suit].filter((_, i) => i !== index && i !== index + 1),\n          },\n        }\n        return result satisfies Result単体抽出Success<\"塔子\"> as Result単体抽出<T>\n      }\n      return find順塔子(手牌, startAt) as Result単体抽出<T>\n    }\n    case \"対子\": {\n      // 雀頭と同じだが七対子用として分ける\n      const 牌1 = 手牌[suit][index]\n      const 牌2 = 手牌[suit][index + 1]\n      if (!(牌1 && 牌2)) return { status: \"failure\" }\n      if (!is対子(牌1, 牌2)) return { status: \"failure\" }\n      const ブロック: T対子 = {\n        type: \"対子\",\n        component: [牌1, 牌2],\n      }\n      const result: Result単体抽出<\"対子\"> = {\n        status: \"success\",\n        ブロック,\n        rest: {\n          ...手牌,\n          [suit]: 手牌[suit].filter((_, i) => i !== index && i !== index + 1),\n        },\n      }\n      return result satisfies Result単体抽出Success<\"対子\"> as Result単体抽出<T>\n    }\n    default:\n      throw new Error(`invalid type: ${type}`)\n  }\n}\n\nconst validate手牌 = (手牌: T手牌Suit別): void => {\n  if (!手牌.m.every((p) => p.suit === \"m\")) {\n    throw new Error(`invalid type in \"手牌.m\". received: ${手牌.m.map((p) => p.toString()).join()}`)\n  }\n  if (!手牌.p.every((p) => p.suit === \"p\")) {\n    throw new Error(`invalid type in \"手牌.p\". received: ${手牌.p.map((p) => p.toString()).join()}`)\n  }\n  if (!手牌.s.every((p) => p.suit === \"s\")) {\n    throw new Error(`invalid type in \"手牌.s\". received: ${手牌.s.map((p) => p.toString()).join()}`)\n  }\n  if (!手牌.z.every((p) => p.suit === \"z\")) {\n    throw new Error(`invalid type in \"手牌.z\". received: ${手牌.z.map((p) => p.toString()).join()}`)\n  }\n  if (!手牌.m.every((p) => p.number >= 1 && p.number <= 9)) {\n    throw new Error(\n      `invalid number in \"手牌.m\". received: ${手牌.m.map((p) => p.toString()).join()}`,\n    )\n  }\n  if (!手牌.p.every((p) => p.number >= 1 && p.number <= 9)) {\n    throw new Error(\n      `invalid number in \"手牌.p\". received: ${手牌.p.map((p) => p.toString()).join()}`,\n    )\n  }\n  if (!手牌.s.every((p) => p.number >= 1 && p.number <= 9)) {\n    throw new Error(\n      `invalid number in \"手牌.s\". received: ${手牌.s.map((p) => p.toString()).join()}`,\n    )\n  }\n  if (!手牌.z.every((p) => p.number >= 1 && p.number <= 7)) {\n    throw new Error(\n      `invalid number in \"手牌.z\". received: ${手牌.z.map((p) => p.toString()).join()}`,\n    )\n  }\n}\n\nconst is対子 = (牌1: 牌, 牌2: 牌): boolean => {\n  return 牌1.toEqual(牌2)\n}\n\nconst is刻子 = (牌1: 牌, 牌2: 牌, 牌3: 牌): boolean => {\n  return (\n    牌1.suit === 牌2.suit &&\n    牌2.suit === 牌3.suit &&\n    牌1.number === 牌2.number &&\n    牌2.number === 牌3.number\n  )\n}\n\nconst is順塔子 = (牌1: 牌, 牌2: 牌): boolean => {\n  return 牌1.suit === 牌2.suit && 牌1.number + 1 === 牌2.number\n}\n\nconst find順子 = (\n  手牌: T手牌Suit別,\n  startAt: { suit: Suit; index: number },\n): Result単体抽出<\"面子\"> => {\n  const 手牌suit = 手牌[startAt.suit]\n  const start牌 = 手牌suit[startAt.index]\n\n  if (start牌 === undefined) return { status: \"failure\" }\n  if (start牌.suit === \"z\") return { status: \"failure\" }\n\n  // 8や9から順子は作れない\n  if (start牌.number === 8 || start牌.number === 9) return { status: \"failure\" }\n\n  const 牌2str = `${start牌.number + 1}${start牌.suit}`\n  const 牌3str = `${start牌.number + 2}${start牌.suit}`\n\n  if (!(isStr牌(牌2str) && isStr牌(牌3str))) return { status: \"failure\" }\n\n  const 順子: T面子 = {\n    type: \"面子\",\n    component: [start牌, new 牌(牌2str), new 牌(牌3str)],\n  }\n\n  const 牌2index = 手牌suit.findIndex((p) => p.toString() === 牌2str)\n  const 牌3index = 手牌suit.findIndex((p) => p.toString() === 牌3str)\n\n  if (牌2index === -1 || 牌3index === -1) return { status: \"failure\" }\n  return {\n    status: \"success\",\n    ブロック: 順子,\n    rest: {\n      ...手牌,\n      [startAt.suit]: 手牌suit.filter(\n        (_, i) => i !== startAt.index && i !== 牌2index && i !== 牌3index,\n      ),\n    },\n  }\n}\n\nconst find順塔子 = (\n  手牌: T手牌Suit別,\n  startAt: { suit: Suit; index: number },\n): Result単体抽出<\"塔子\"> => {\n  const 手牌suit = 手牌[startAt.suit]\n  const start牌 = 手牌suit[startAt.index]\n\n  if (start牌 === undefined) return { status: \"failure\" }\n  if (start牌.suit === \"z\") return { status: \"failure\" }\n\n  // 9から順塔子は作れない\n  if (start牌.number === 9) return { status: \"failure\" }\n\n  // 両面・辺張(連続)を試行\n  const 牌2str = `${start牌.number + 1}${start牌.suit}`\n  if (!isStr牌(牌2str)) return { status: \"failure\" }\n\n  const 牌2index = 手牌suit.findIndex((p) => p.toString() === 牌2str)\n  if (牌2index >= 0) {\n    const 塔子: T塔子 = {\n      type: \"塔子\",\n      component: [start牌, new 牌(牌2str)],\n    }\n    return {\n      status: \"success\",\n      ブロック: 塔子,\n      rest: {\n        ...手牌,\n        [startAt.suit]: 手牌suit.filter((_, i) => i !== startAt.index && i !== 牌2index),\n      },\n    }\n  }\n\n  // 嵌張(1個とばし)を試行\n  const 牌3str = `${start牌.number + 2}${start牌.suit}`\n  if (!isStr牌(牌3str)) return { status: \"failure\" }\n\n  const 牌3index = 手牌suit.findIndex((p) => p.toString() === 牌3str)\n  if (牌3index >= 0) {\n    const 塔子: T塔子 = {\n      type: \"塔子\",\n      component: [start牌, new 牌(牌3str)],\n    }\n    return {\n      status: \"success\",\n      ブロック: 塔子,\n      rest: {\n        ...手牌,\n        [startAt.suit]: 手牌suit.filter((_, i) => i !== startAt.index && i !== 牌3index),\n      },\n    }\n  }\n  return { status: \"failure\" }\n}\n","import { extractSingleブロック } from \"./extractSingleブロック.mjs\"\nimport {\n  IntermediateExtractResult,\n  IntermediateExtractTree,\n  TブロックType,\n  T手牌Suit別,\n  T面子,\n} from \"./手牌utils.type.mjs\"\n\nexport const extract面子Tree = (手牌: T手牌Suit別): IntermediateExtractTree<\"面子\">[] => {\n  const wholeResult: ReturnType<typeof extract面子Tree> = []\n  for (const suit of [\"m\", \"p\", \"s\", \"z\"] as const) {\n    const 手牌suit = 手牌[suit]\n    for (let i = 0; i < 手牌suit.length; i++) {\n      const result面子 = extractSingleブロック(手牌, \"面子\", { suit: suit, index: i })\n      if (result面子.status === \"failure\") continue\n\n      const children = extract面子Tree(result面子.rest)\n\n      wholeResult.push({\n        ブロック: result面子.ブロック,\n        rest: result面子.rest,\n        children,\n      })\n    }\n  }\n\n  return wholeResult\n}\n\nexport const extract塔子Tree = (手牌: T手牌Suit別): IntermediateExtractTree<\"塔子\">[] => {\n  const wholeResult: ReturnType<typeof extract塔子Tree> = []\n  for (const suit of [\"m\", \"p\", \"s\", \"z\"] as const) {\n    const 手牌suit = 手牌[suit]\n    for (let i = 0; i < 手牌suit.length; i++) {\n      const result塔子 = extractSingleブロック(手牌, \"塔子\", { suit: suit, index: i })\n      if (result塔子.status === \"failure\") {\n        continue\n      }\n\n      const children = extract塔子Tree(result塔子.rest)\n\n      wholeResult.push({\n        ブロック: result塔子.ブロック,\n        rest: result塔子.rest,\n        children,\n      })\n    }\n  }\n\n  // 塔子がない場合も、restを返さないといけない\n  if (wholeResult.length === 0) {\n    return [\n      {\n        ブロック: null,\n        rest: 手牌,\n        children: [],\n      },\n    ]\n  }\n\n  return wholeResult\n}\n\nexport const extract対子Tree = (手牌: T手牌Suit別): IntermediateExtractTree<\"対子\">[] => {\n  const wholeResult: ReturnType<typeof extract対子Tree> = []\n  for (const suit of [\"m\", \"p\", \"s\", \"z\"] as const) {\n    const 手牌suit = 手牌[suit]\n    for (let i = 0; i < 手牌suit.length; i++) {\n      const result対子 = extractSingleブロック(手牌, \"対子\", { suit: suit, index: i })\n      if (result対子.status === \"failure\") {\n        continue\n      }\n\n      const children = extract対子Tree(result対子.rest)\n\n      wholeResult.push({\n        ブロック: result対子.ブロック,\n        rest: result対子.rest,\n        children,\n      })\n    }\n  }\n\n  // 塔子がない場合も、restを返さないといけない\n  if (wholeResult.length === 0) {\n    return [\n      {\n        ブロック: null,\n        rest: 手牌,\n        children: [],\n      },\n    ]\n  }\n\n  return wholeResult\n}\n\nexport const flatTree = <T extends TブロックType>(\n  tree: IntermediateExtractTree<T>,\n): IntermediateExtractResult<T>[] => {\n  if (tree.children.length === 0) {\n    return [\n      {\n        ブロック: tree.ブロック ? [tree.ブロック] : [],\n        rest: tree.rest,\n      },\n    ]\n  }\n\n  const flatChildren = tree.children.flatMap(flatTree)\n\n  const result = flatChildren.map((c) => ({\n    ブロック: (tree.ブロック ? [tree.ブロック, ...c.ブロック] : [...c.ブロック]).sort((a, b) => {\n      if (a == null) return 1\n      if (b == null) return -1\n      // component は、suit が m > p > s > z の順、そして数字が小さい順\n      if (a.type === b.type) {\n        if (a.component[0].suit === b.component[0].suit) {\n          return a.component[0].number - b.component[0].number\n        }\n        return a.component[0].suit.charCodeAt(0) - b.component[0].suit.charCodeAt(0)\n      }\n      // type は、雀頭 > 面子 > 塔子 の順\n      if (a.type === \"雀頭\") return -1\n      if (b.type === \"雀頭\") return 1\n      if (a.type === \"面子\") return -1\n      if (b.type === \"面子\") return 1\n      if (a.type === \"塔子\") return -1\n      if (b.type === \"塔子\") return 1\n      return 0\n    }),\n    rest: c.rest,\n  }))\n\n  return result\n}\n\nexport const flatTrees = <T extends TブロックType>(\n  trees: IntermediateExtractTree<T>[],\n): IntermediateExtractResult<T>[] => {\n  return trees.flatMap(flatTree).filter((r, i, arr) => {\n    const rStr = JSON.stringify(r)\n    return arr.findIndex((r2) => JSON.stringify(r2) === rStr) === i\n  })\n}\n","import { 牌 } from \"../牌.mjs\"\nimport { calcシャンテン数5ブロック } from \"./calcシャンテン数.mjs\"\nimport { extractSingleブロック } from \"./extractSingleブロック.mjs\"\nimport { extract塔子Tree, extract面子Tree, flatTrees } from \"./extractブロックTree.mjs\"\nimport {\n  ExtractResult5ブロック,\n  Result単体抽出,\n  Result単体抽出Success,\n  T手牌Suit別,\n} from \"./手牌utils.type.mjs\"\n\nexport const extractPriority雀頭 = (手牌: T手牌Suit別): ExtractResult5ブロック[] => {\n  const results: ExtractResult5ブロック[] = []\n  const 雀頭List = extract雀頭(手牌)\n\n  // ブロック(面子・塔子)を抽出する\n  for (const 雀頭 of 雀頭List) {\n    const 面子List = flatTrees(extract面子Tree(雀頭.rest))\n    if (面子List.length > 0) {\n      for (const 面子 of 面子List) {\n        const 塔子List = flatTrees(extract塔子Tree(面子.rest))\n        for (const 塔子 of 塔子List) {\n          results.push({\n            雀頭: 雀頭.ブロック,\n            面子: 面子.ブロック,\n            塔子: 塔子.ブロック,\n            rest: 塔子.rest,\n          })\n        }\n      }\n    } else {\n      const 塔子List = flatTrees(extract塔子Tree(雀頭.rest))\n      // 塔子がとれなくても、restだけを含んだ配列が返ってくるので、これで動く\n      for (const 塔子 of 塔子List) {\n        results.push({\n          雀頭: 雀頭.ブロック,\n          面子: [],\n          塔子: 塔子.ブロック,\n          rest: 塔子.rest,\n        })\n      }\n    }\n  }\n\n  // シャンテン数の低いもののみを残す\n  const シャンテン数付きresult: [number, ExtractResult5ブロック][] = results.map((r) => [\n    calcシャンテン数5ブロック(r),\n    r,\n  ])\n\n  const min = Math.min(...シャンテン数付きresult.map(([s]) => s))\n  const filteredResults = シャンテン数付きresult\n    .filter(([シャンテン数]) => シャンテン数 === min)\n    .map(([, r]) => r)\n\n  return filteredResults\n}\n\nconst extract雀頭 = (手牌: T手牌Suit別): Result単体抽出Success<\"雀頭\">[] => {\n  const wholeResult: Result単体抽出<\"雀頭\">[] = []\n  for (const suit of [\"m\", \"p\", \"s\", \"z\"] as const) {\n    const 手牌suit = 手牌[suit]\n    for (let i = 0; i < 手牌suit.length; i++) {\n      wholeResult.push(extractSingleブロック(手牌, \"雀頭\", { suit: suit, index: i }))\n    }\n  }\n  // failureを除外\n  const successResult = wholeResult.filter(\n    (r) => r.status === \"success\",\n  ) as Result単体抽出Success<\"雀頭\">[]\n  // 重複除去\n  const uniqueResult = successResult.filter((r, i) => {\n    const rStr = JSON.stringify(r)\n    return successResult.findIndex((r2) => JSON.stringify(r2) === rStr) === i\n  })\n  return uniqueResult\n}\n\nif (import.meta.vitest) {\n  test(\"雀頭抽出\", () => {\n    const result = extract雀頭({\n      m: ([\"1m\", \"1m\", \"1m\", \"2m\", \"3m\"] as const).map((s) => new 牌(s)),\n      p: ([\"4p\", \"5p\", \"6p\", \"6p\", \"9p\"] as const).map((s) => new 牌(s)),\n      s: ([\"3s\"] as const).map((s) => new 牌(s)),\n      z: ([\"1z\", \"1z\"] as const).map((s) => new 牌(s)),\n    })\n    expect(result).toMatchSnapshot()\n  })\n}\n","import { 牌 } from \"../牌.mjs\"\nimport { calcシャンテン数5ブロック } from \"./calcシャンテン数.mjs\"\nimport { extract塔子Tree, extract面子Tree, flatTrees } from \"./extractブロックTree.mjs\"\nimport { ExtractResult5ブロック, T手牌Suit別 } from \"./手牌utils.type.mjs\"\n\nexport const extractPriority面子 = (手牌: T手牌Suit別): ExtractResult5ブロック[] => {\n  const results: ExtractResult5ブロック[] = []\n  const 面子List = flatTrees(extract面子Tree(手牌))\n\n  if (面子List.length > 0) {\n    // ブロック(面子・塔子)を抽出する\n    for (const 面子 of 面子List) {\n      const 塔子List = flatTrees(extract塔子Tree(面子.rest))\n      for (const 塔子 of 塔子List) {\n        results.push({\n          雀頭: null,\n          面子: 面子.ブロック,\n          塔子: 塔子.ブロック,\n          rest: 塔子.rest,\n        })\n      }\n    }\n  } else {\n    const 塔子List = flatTrees(extract塔子Tree(手牌))\n    // 塔子がとれなくても、restだけを含んだ配列が返ってくるので、これで動く\n    for (const 塔子 of 塔子List) {\n      results.push({\n        雀頭: null,\n        面子: [],\n        塔子: 塔子.ブロック,\n        rest: 塔子.rest,\n      })\n    }\n  }\n\n  // 雀頭がなく、塔子として対子が抽出された場合、それは本来雀頭として抽出されるべきもの\n  // extractPriority雀頭で抽出してあるので、この関数の結果からは除外する\n  const filteredResults = results.filter((r) => !r.塔子.some((t) => is対子(...t.component)))\n\n  // シャンテン数の低いもののみを残す\n  const シャンテン数付きresult: [number, ExtractResult5ブロック][] = filteredResults.map((r) => [\n    calcシャンテン数5ブロック(r),\n    r,\n  ])\n  const min = Math.min(...シャンテン数付きresult.map(([s]) => s))\n  const filteredResults2 = シャンテン数付きresult\n    .filter(([シャンテン数]) => シャンテン数 === min)\n    .map(([, r]) => r)\n\n  return filteredResults2\n}\n\nconst is対子 = (牌1: 牌, 牌2: 牌): boolean => {\n  return 牌1.toEqual(牌2)\n}\n","import { generate手牌Suit別ForTest } from \"../utils/utils.mjs\"\nimport { extract対子Tree, flatTrees } from \"./extractブロックTree.mjs\"\nimport {\n  ExtractResult5ブロック,\n  ExtractResult七対子,\n  ExtractResult国士無双,\n  T手牌Suit別,\n} from \"./手牌utils.type.mjs\"\n\nexport const extract七対子 = (手牌: T手牌Suit別): ExtractResult七対子 => {\n  const 七対子 = flatTrees(extract対子Tree(手牌))[0]\n  if (七対子 === undefined) {\n    return {\n      対子: [],\n      rest: 手牌,\n    }\n  }\n  return {\n    対子: 七対子.ブロック,\n    rest: 七対子.rest,\n  }\n}\n\nexport const extract国士無双 = (手牌: T手牌Suit別): ExtractResult国士無双 => {\n  const 么九牌unique: ExtractResult国士無双[\"么九牌unique\"] = []\n  const 么九牌rest: ExtractResult国士無双[\"么九牌rest\"] = []\n  const rest: ExtractResult国士無双[\"rest\"] = {\n    m: [],\n    p: [],\n    s: [],\n    z: [],\n  }\n  // m,p,sから1,9の牌を1枚ずつだけ抽出する\n  for (const suit of [\"m\", \"p\", \"s\"] as const) {\n    for (const 牌 of 手牌[suit]) {\n      if (牌.number === 1 || 牌.number === 9) {\n        if (!么九牌unique.find((p) => p.toString() === 牌.toString())) {\n          么九牌unique.push(牌)\n        } else {\n          么九牌rest.push(牌)\n        }\n      } else {\n        rest[suit].push(牌)\n      }\n    }\n  }\n  // zはすべての種類を1枚ずつだけ抽出する\n  for (const 牌 of 手牌.z) {\n    if (!么九牌unique.find((p) => p.toString() === 牌.toString())) {\n      么九牌unique.push(牌)\n    } else {\n      么九牌rest.push(牌)\n    }\n  }\n  return {\n    么九牌unique,\n    么九牌rest,\n    rest,\n  }\n}\n","import { 牌 } from \"../牌.mjs\"\n\nexport const sort牌List = (target: 牌[]): 牌[] => {\n  return target.sort((a, b) => {\n    if (a.suit === b.suit) return a.number - b.number\n    return a.suit.charCodeAt(0) - b.suit.charCodeAt(0)\n  })\n}\n\nexport const unique牌List = (target: 牌[]): 牌[] => {\n  // 重複除去\n  return sort牌List(target).filter((p, i, arr) => {\n    if (i === 0) return true\n\n    const prev = arr[i - 1]\n    if (prev === undefined) throw new Error(\"arr[i-1] is undefined\")\n    return !p.toEqual(prev)\n  })\n}\n","import { Str牌 } from \"../utils/types.mjs\"\nimport { 牌 } from \"../牌.mjs\"\nimport {\n  calcシャンテン数5ブロック,\n  calcシャンテン数七対子,\n  calcシャンテン数国士無双,\n} from \"./calcシャンテン数.mjs\"\nimport { countRemaining牌num } from \"./countRemaining牌.mjs\"\nimport { extractPriority雀頭 } from \"./extractPriority雀頭.mjs\"\nimport { extractPriority面子 } from \"./extractPriority面子.mjs\"\nimport { extract七対子, extract国士無双 } from \"./extract特殊役.mjs\"\nimport { unique牌List } from \"./format牌List.mjs\"\nimport { seek有効牌5ブロック, seek有効牌七対子, seek有効牌国士無双 } from \"./seek有効牌.mjs\"\nimport { ExtractResult5ブロック, T手牌Suit別 } from \"./手牌utils.type.mjs\"\n\nconst analyze手牌13Memo = new Map<string, AnalysisResult手牌13>()\nconst addToMap = (key: string, value: AnalysisResult手牌13) => {\n  analyze手牌13Memo.set(key, value)\n  // Map が 3つを超えたら、古いものを削除する\n  if (analyze手牌13Memo.size > 3) {\n    const keys = Array.from(analyze手牌13Memo.keys())\n    if (keys[0]) {\n      analyze手牌13Memo.delete(keys[0])\n    }\n  }\n}\n\ntype AnalysisResult13Common = {\n  シャンテン数: number\n  有効牌: 牌[]\n}\n\ntype AnalysisResult5ブロックIndivisual = {\n  シャンテン数: number\n  ブロック: ExtractResult5ブロック\n  有効牌: 牌[]\n}\n\nexport type AnalysisResult手牌13 = {\n  _5ブロック: AnalysisResult13Common & {\n    indivisuals: AnalysisResult5ブロックIndivisual[]\n  }\n  七対子: AnalysisResult13Common\n  国士無双: AnalysisResult13Common\n}\n\nexport type AnalysisResult13 = {\n  analysisResult: AnalysisResult手牌13\n  シャンテン数: number\n  有効牌: 牌[]\n  remaining有効牌num: Map<\n    Str牌,\n    {\n      牌: 牌\n      remains: number\n    }\n  >\n}\n\n// 集約関数\nexport const analyze13 = (手牌Suit別: T手牌Suit別, used牌: 牌[]): AnalysisResult13 => {\n  const analysisResult = analyze手牌13(手牌Suit別)\n\n  const シャンテン数 = Math.min(\n    analysisResult._5ブロック.シャンテン数,\n    analysisResult.七対子.シャンテン数,\n    analysisResult.国士無双.シャンテン数,\n  )\n\n  const 有効牌target = []\n  if (シャンテン数 === analysisResult._5ブロック.シャンテン数) {\n    有効牌target.push(...analysisResult._5ブロック.有効牌)\n  }\n  if (シャンテン数 === analysisResult.七対子.シャンテン数) {\n    有効牌target.push(...analysisResult.七対子.有効牌)\n  }\n  if (シャンテン数 === analysisResult.国士無双.シャンテン数) {\n    有効牌target.push(...analysisResult.国士無双.有効牌)\n  }\n  const 有効牌 = unique牌List(有効牌target)\n\n  const remaining有効牌num = countRemaining牌num(有効牌, used牌)\n\n  return {\n    analysisResult,\n    シャンテン数,\n    有効牌,\n    remaining有効牌num,\n  }\n}\n\n// 手牌をブロックに分けて待ちを求める\nconst analyze手牌13 = (手牌Suit別: T手牌Suit別): AnalysisResult手牌13 => {\n  // メモ化する\n  const key =\n    手牌Suit別.m.map((p) => p.toString()).join(\"\") +\n    手牌Suit別.p.map((p) => p.toString()).join(\"\") +\n    手牌Suit別.s.map((p) => p.toString()).join(\"\") +\n    手牌Suit別.z.map((p) => p.toString()).join(\"\")\n\n  const memo = analyze手牌13Memo.get(key)\n  if (memo) {\n    return memo\n  }\n\n  const result = {\n    _5ブロック: analyze手牌5ブロック(手牌Suit別),\n    七対子: analyze手牌七対子(手牌Suit別),\n    国士無双: analyze手牌国士無双(手牌Suit別),\n  }\n  addToMap(key, result)\n\n  return result\n}\n\nconst analyze手牌5ブロック = (手牌Suit別: T手牌Suit別): AnalysisResult手牌13[\"_5ブロック\"] => {\n  const priority雀頭 = extractPriority雀頭(手牌Suit別)\n  const priority面子 = extractPriority面子(手牌Suit別)\n  // シャンテン数の最も低いものを抽出する\n  const _シャンテン数5ブロック =\n    priority雀頭.length + priority面子.length === 0\n      ? 8\n      : Math.min(...[...priority雀頭, ...priority面子].map((r) => calcシャンテン数5ブロック(r)))\n\n  const _5ブロック = [...priority雀頭, ...priority面子].filter(\n    (r) => calcシャンテン数5ブロック(r) === _シャンテン数5ブロック,\n  )\n\n  const indivisuals5ブロック = _5ブロック.map((b) => ({\n    シャンテン数: _シャンテン数5ブロック,\n    ブロック: b,\n    有効牌: seek有効牌5ブロック(b, _シャンテン数5ブロック),\n  }))\n\n  // 有効牌を集約して、重複を除去する\n  const 有効牌5ブロック = indivisuals5ブロック\n    .flatMap((r) => r.有効牌)\n    .filter((p, i, arr) => {\n      return arr.findIndex((p2) => p2.suit === p.suit && p2.number === p.number) === i\n    })\n    .sort((a, b) => {\n      if (a.suit === b.suit) return a.number - b.number\n      return a.suit.charCodeAt(0) - b.suit.charCodeAt(0)\n    })\n\n  return {\n    シャンテン数: _シャンテン数5ブロック,\n    有効牌: 有効牌5ブロック,\n    indivisuals: indivisuals5ブロック,\n  }\n}\n\nconst analyze手牌七対子 = (手牌Suit別: T手牌Suit別): AnalysisResult手牌13[\"七対子\"] => {\n  const 七対子 = extract七対子(手牌Suit別)\n  const _シャンテン数七対子 = calcシャンテン数七対子(七対子)\n  const 有効牌七対子 = seek有効牌七対子(七対子)\n  return {\n    シャンテン数: _シャンテン数七対子,\n    有効牌: 有効牌七対子,\n  }\n}\n\nconst analyze手牌国士無双 = (手牌Suit別: T手牌Suit別): AnalysisResult手牌13[\"国士無双\"] => {\n  const 国士無双 = extract国士無双(手牌Suit別)\n  const _シャンテン数国士無双 = calcシャンテン数国士無双(国士無双)\n  const 有効牌国士無双 = seek有効牌国士無双(国士無双)\n  return {\n    シャンテン数: _シャンテン数国士無双,\n    有効牌: 有効牌国士無双,\n  }\n}\n","import { Str牌 } from \"./utils/types.mjs\"\nimport { 副露 } from \"./副露.mjs\"\nimport { AnalysisResult13, analyze13 } from \"./手牌utils/analyze手牌.mjs\"\nimport { sort牌List, unique牌List } from \"./手牌utils/format牌List.mjs\"\nimport { T手牌Suit別 } from \"./手牌utils/手牌utils.type.mjs\"\nimport { 牌 } from \"./牌.mjs\"\n\nexport type T手牌普通 =\n  | [牌]\n  | [牌, 牌, 牌, 牌]\n  | [牌, 牌, 牌, 牌, 牌, 牌, 牌]\n  | [牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌]\n  | [牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌, 牌]\ntype T手牌副露 = [] | [副露] | [副露, 副露] | [副露, 副露, 副露] | [副露, 副露, 副露, 副露]\ntype analysisResult14 = Map<\n  Str牌,\n  {\n    打牌: 牌\n    analysisResult: AnalysisResult13\n  }\n>\n\n/**\n * Represents 手牌.\n */\nexport class 手牌 {\n  普通: T手牌普通\n  副露: T手牌副露 = []\n  ツモ: 牌 | null = null\n  protected analysisResult13: AnalysisResult13 | null = null\n  protected analysisResult14: analysisResult14 | null = null\n\n  /**\n   * Creates a new 手牌 instance.\n   * @param 普通 The normal 牌s in the hand.\n   * @param 副露 The melded 牌s in the hand.\n   */\n  constructor(普通: T手牌普通, 副露?: T手牌副露) {\n    this.普通 = 普通\n    if (副露) {\n      this.副露 = 副露\n    }\n    this.sort()\n    this.analyze13()\n  }\n\n  /**\n   * Sorts the normal 牌s in the hand.\n   */\n  protected sort() {\n    this.普通.sort((a, b) => {\n      if (a.suit === b.suit) return a.number - b.number\n      return a.suit.charCodeAt(0) - b.suit.charCodeAt(0)\n    })\n  }\n\n  /**\n   * Returns the 手牌's マンズ 牌s.\n   * @returns The マンズ 牌s in the hand.\n   */\n  protected マンズ() {\n    return this.普通.filter((p) => p.suit === \"m\")\n  }\n\n  /**\n   * Returns the 手牌's ピンズ 牌s.\n   * @returns The ピンズ 牌s in the hand.\n   */\n  protected ピンズ() {\n    return this.普通.filter((p) => p.suit === \"p\")\n  }\n\n  /**\n   * Returns the 手牌's ソーズ 牌s.\n   * @returns The ソーズ 牌s in the hand.\n   */\n  protected ソーズ() {\n    return this.普通.filter((p) => p.suit === \"s\")\n  }\n\n  /**\n   * Returns the 手牌's 字牌 牌s.\n   * @returns The 字牌 牌s in the hand.\n   */\n  protected 字牌() {\n    return this.普通.filter((p) => p.suit === \"z\")\n  }\n\n  /**\n   * Returns a string representation of the normal 牌s in the hand.\n   * @returns A string representation of the normal 牌s.\n   */\n  toString普通() {\n    return this.普通.map((p) => p.toString()).join(\"\")\n  }\n\n  /**\n   * Sets the ツモ 牌 in the hand and performs analysis for 14-牌 hand.\n   * @param ツモ The ツモ 牌.\n   */\n  doツモ(ツモ: 牌) {\n    this.ツモ = ツモ\n    this.analyze14()\n  }\n\n  /**\n   * Adds an melded set of 牌s to the hand and performs analysis for 14-牌 hand.\n   * @param 副露 The melded set of 牌s.\n   */\n  do副露(副露: 副露) {\n    if (this.副露.length === 4) throw new Error(\"副露できるのは4回まで\")\n    // 副露.ほかの牌 が 手牌に含まれていないといけない\n    for (const p of 副露.other牌) {\n      if (p === undefined) throw new Error(\"副露のほかの牌に undefined が含まれている\")\n      if (!this.普通.some((p2) => p2.toEqual(p))) {\n        throw new Error(`手牌に ${p} がないのに副露しようとした`)\n      }\n    }\n\n    this.副露 = [...this.副露, 副露]\n    // 副露で使った牌を手牌から削除する\n    for (const p of 副露.other牌) {\n      if (p === undefined) throw new Error(\"副露のほかの牌に undefined が含まれている\")\n      const index = this.普通.findIndex((p2) => p2.toEqual(p))\n      this.普通.splice(index, 1)\n    }\n    this.analyze14({ is副露後: true })\n  }\n\n  /**\n   * Performs the specified 打牌 action in the hand.\n   * @param 打牌 The 打牌 action to perform.\n   */\n  do打牌(\n    打牌:\n      | { type: \"ツモ切り\" }\n      | { type: \"ツモ後手出し\"; 牌: 牌 }\n      | { type: \"副露後手出し\"; 牌: 牌 },\n  ): void {\n    switch (打牌.type) {\n      case \"ツモ切り\": {\n        if (this.ツモ === null) throw new Error(\"ツモしていないのに打牌しようとした\")\n        this.ツモ = null\n        break\n      }\n      case \"ツモ後手出し\": {\n        if (this.ツモ === null) throw new Error(\"ツモしていないのに打牌しようとした\")\n        const index = this.普通.findIndex((p) => p.toEqual(打牌.牌))\n        if (index === -1) throw new Error(`手牌に ${打牌.牌} がないのに打牌しようとした`)\n        this.普通.splice(index, 1, this.ツモ)\n        this.ツモ = null\n        this.sort()\n        break\n      }\n      case \"副露後手出し\": {\n        const index = this.普通.findIndex((p) => p.toEqual(打牌.牌))\n        if (index === -1) throw new Error(`手牌に ${打牌.牌} がないのに打牌しようとした`)\n        this.普通.splice(index, 1)\n        this.ツモ = null\n        this.sort()\n        break\n      }\n      default: {\n        throw new Error(`invalid 打牌.type: ${打牌}`)\n      }\n    }\n    this.analyze13()\n  }\n\n  /**\n   * Returns the analysis result for 13-牌 hand.\n   * @returns The analysis result for 13-牌 hand.\n   */\n  getAnalysisResult13() {\n    return this.analysisResult13\n  }\n\n  /**\n   * Returns the analysis result for 14-牌 hand.\n   * @returns The analysis result for 14-牌 hand.\n   */\n  getAnalysisResult14() {\n    return this.analysisResult14\n  }\n\n  /**\n   * Returns a list of all 牌s in the hand, including normal and melded 牌s.\n   * @returns A list of all 牌s in the hand.\n   */\n  牌List() {\n    const _牌List = [...this.普通, ...this.副露.flatMap((f) => f.to牌List())]\n    if (this.ツモ) _牌List.push(this.ツモ)\n\n    return sort牌List(_牌List)\n  }\n\n  /**\n   * Returns a list of all 牌s in the hand, excluding the ツモ 牌.\n   * @returns A list of all 牌s in the hand, excluding the ツモ 牌.\n   */\n  牌ListExcludesツモ() {\n    const _牌List = [...this.普通, ...this.副露.flatMap((f) => f.to牌List())]\n\n    return sort牌List(_牌List)\n  }\n\n  /**\n   * Performs analysis for 13-牌 hand.\n   * @returns The analysis result for 13-牌 hand.\n   */\n  protected analyze13() {\n    const analysisResult = analyze13(\n      {\n        m: this.マンズ(),\n        p: this.ピンズ(),\n        s: this.ソーズ(),\n        z: this.字牌(),\n      },\n      this.牌List(),\n    )\n    this.analysisResult14 = null\n    this.analysisResult13 = analysisResult\n    return this.analysisResult13\n  }\n\n  /**\n   * Performs analysis for 14-牌 hand.\n   * @param is副露後 Indicates whether the analysis is performed after an melded set of 牌s is added.\n   * @returns The analysis result for 14-牌 hand.\n   */\n  protected analyze14({ is副露後 } = { is副露後: false }): analysisResult14 {\n    const hand = (() => {\n      if (is副露後) return this.普通\n      if (this.ツモ === null) throw new Error(\"ツモしていないのに analyze14 しようとした\")\n      return sort牌List([...this.普通, this.ツモ])\n    })()\n    const 打牌candidateList = unique牌List(hand)\n    const result: analysisResult14 = new Map()\n    // 打牌candidateList をループする\n    for (const 牌 of 打牌candidateList) {\n      const i = hand.findIndex((p) => p.toEqual(牌))\n      result.set(牌.toString(), {\n        打牌: 牌,\n        analysisResult: analyze13(牌ListToSuit別(hand.toSpliced(i, 1)), this.牌List()),\n      })\n    }\n    this.analysisResult13 = null\n    this.analysisResult14 = result\n    return this.analysisResult14\n  }\n}\n\nconst 牌ListToSuit別 = (牌List: 牌[]): T手牌Suit別 => {\n  const 手牌Suit別: T手牌Suit別 = {\n    m: [],\n    p: [],\n    s: [],\n    z: [],\n  }\n  for (const 牌 of 牌List) {\n    手牌Suit別[牌.suit].push(牌)\n  }\n  return 手牌Suit別\n}\n"],"mappings":"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","names":["count牌","n","手牌","手牌","手牌","手牌","手牌","is対子","手牌","牌","副露","牌"]}